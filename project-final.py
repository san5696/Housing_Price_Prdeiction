# -*- coding: utf-8 -*-
"""project-checkpoint2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mviO5nrWVokh4EQm7HEh3FG4UhYMnK3m
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load



# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import seaborn as sns
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.metrics import mean_squared_error
from scipy import stats
from scipy.stats import skew, norm
from scipy.special import boxcox1p
from scipy.stats import boxcox_normmax
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.pipeline import make_pipeline
from sklearn.feature_selection import SelectKBest,f_regression
from sklearn.model_selection import GridSearchCV,cross_validate
import xgboost as xgb
import lightgbm as lgb
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
random_state = 55

train = pd.read_csv("../content/train.csv")
test = pd.read_csv("../content/test.csv")

corr = train.corr()
corr.style.background_gradient(cmap='coolwarm').set_precision(2)

numeric = []

for column in train.columns:
    if train[column].dtype != object:
        numeric.append(column)

# visualising some more outliers in the data values
fig, axs = plt.subplots(ncols=2, nrows=0, figsize=(12, 120))
plt.subplots_adjust(right=2)
plt.subplots_adjust(top=2)
sns.color_palette("husl", 8)
for i, feature in enumerate(list(train[numeric]), 1):
    if(feature=='MiscVal'):
        break
    plt.subplot(len(list(numeric)), 3, i)
    sns.scatterplot(x=feature, y='SalePrice', hue='SalePrice', palette='Reds', data=train)
        
    plt.xlabel('{}'.format(feature), size=15,labelpad=12.5)
    plt.ylabel('SalePrice', size=15, labelpad=12.5)
    
    
    
    plt.legend(loc='best', prop={'size': 10})
        
plt.show()

data = pd.concat([train['SalePrice'], train['OverallQual']], axis=1)
f, ax = plt.subplots(figsize=(8, 6))
fig = sns.boxplot(x=train['OverallQual'], y="SalePrice", data=data)

data = pd.concat([train['SalePrice'], train['YearBuilt']], axis=1)
f, ax = plt.subplots(figsize=(20, 8))
fig = sns.boxplot(x=train['YearBuilt'], y="SalePrice", data=data)
plt.xticks(rotation=45);

plt.figure(figsize=(15,6))

fig = sns.distplot( train['SalePrice'])
fig.set_xlabel('SalePrice')


'''
We can see from the graph that the SalePrice value is highly skewed with a tail on the right side
So we will try some transformations on it to get a better distribution of the variable

'''

plt.figure(figsize=(15,6))
fig = sns.distplot( np.log(train['SalePrice']))
fig.set_xlabel('SalePrice')

'''
After the transformation is done, we can see that the districution is more like gaussian.
'''

train = train[train['GrLivArea']< 5000]
train.reset_index(drop= True,inplace=True)

Features = list(train.columns)
Features.remove("SalePrice")
y_label = np.log(train['SalePrice'])
X_train = train[Features]

'''
We remove the target variable from the train set
'''

features = ['GarageYrBlt','TotRmsAbvGrd','1stFlrSF','GarageArea']
X_train.drop(features,axis=1,inplace=True)

dict_null = {}
for column in X_train.columns:
    null_percent = X_train[column].isna().mean()*100
    dict_null[column] = null_percent
df_miss = sorted(dict_null.items(), key=lambda x: x[1], reverse=True)
print('Percent of missing data')
df_miss[0:30]

X_feat_eng = X_train.copy()
X_feat_eng['lastupdate'] = X_feat_eng['YearRemodAdd'] - X_feat_eng['YearBuilt']
X_feat_eng['area'] = X_feat_eng['LotArea'] / X_feat_eng['LotFrontage']
X_feat_eng['value'] = X_feat_eng['YearBuilt'] * X_feat_eng['OverallQual']
X_feat_eng['basement_finished'] = X_feat_eng['BsmtFinSF1'] > 0
X_feat_eng['garage_value'] = X_feat_eng['YearBuilt'] * X_feat_eng['GarageCars']
X_feat_eng['extra_features'] = X_feat_eng['Fireplaces'] + X_feat_eng['OverallQual']

X_feat_eng = X_feat_eng.drop(columns=['GarageCars'])

columnall = ['SalePrice','OverallQual','GrLivArea','GarageCars','TotalBsmtSF',
        'FullBath','YearBuilt','YearRemodAdd','MasVnrArea','Fireplaces']
for column in columnall:
    fig = plt.figure()

    sns.distplot(X_feat_eng[column], fit=norm);
    fig = plt.figure()
    stats.probplot(X_feat_eng[column], plot=plt)

# applying log transformation
columns = ['GrLivArea','TotalBsmtSF','YearBuilt','YearRemodAdd','MasVnrArea']
for col in columns :
    X_feat_eng[col+'temp'] = np.log(X_feat_eng[col].replace(0,1))
for col in columns:
    fig = plt.figure()
    sns.distplot(X_feat_eng[col+'temp'], fit=norm)
    fig = plt.figure()
    stats.probplot(X_feat_eng[col+'temp'], plot=plt)

columns_1 = ['TotalBsmtSF','YearBuilt','YearRemodAdd','MasVnrArea']
for col in columns_1 :
    X_feat_eng[col+'temp'] = np.sqrt(X_feat_eng[col].replace(0,1))
for col in columns_1:
    fig = plt.figure()
    sns.distplot(X_feat_eng[col+'temp'], fit=norm)
    fig = plt.figure()
    stats.probplot(X_feat_eng[col+'temp'], plot=plt)

for col in columns:
    X_feat_eng.drop([col+'temp'],axis=1,inplace = True)

X_feat_eng['GrLivArea'] = np.log(X_feat_eng['GrLivArea'].replace(0,1))

numerical_ix  = X_feat_eng.select_dtypes(include=['int64', 'float64']).columns
categorical_ix = X_feat_eng.select_dtypes(include=['object', 'bool']).columns

numerical_processing = Pipeline(steps = [
    ('imputer',SimpleImputer(strategy = 'median')),
    ('scaler', StandardScaler())
])
categorical_processing = Pipeline(steps = [
    ('imputer', SimpleImputer(strategy='most_frequent')),
    ('onehot', OneHotEncoder(handle_unknown='ignore'))
])
t = [('cat', categorical_processing, categorical_ix), ('num',numerical_processing ,numerical_ix)]
column_processing = ColumnTransformer(transformers=t)

processed_X_train = column_processing.fit_transform(X_feat_eng, y_label)

tune_lgb = Pipeline([
     ('selector',SelectKBest(f_regression)),
     ('model',lgb.LGBMRegressor(random_state=42,objective='regression',
                              bagging_fraction = 0.8,
                              bagging_freq = 5, feature_fraction = 0.2319,
                              feature_fraction_seed=9, bagging_seed=9,
                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11))])

grid_lgb = GridSearchCV( estimator = tune_lgb, param_grid = {'selector__k':[276] , 
  'model__learning_rate':[0.005,0.01],'model__num_iterations':[10000],'model__n_estimators':[500],
                            'model__max_bin':[100],'model__num_leaves':[25,30]},
                               n_jobs=-1, scoring="neg_mean_squared_error", cv=5, verbose=3)

grid_lgb.fit(processed_X_train,y_label)
print('the best parameters : ',grid_lgb.best_params_)
print('the best score = ', np.sqrt(-grid_lgb.best_score_))

grid_lgb.best_estimator_.score(processed_X_train,y_label)

tune_xgb = Pipeline([
     ('selector',SelectKBest(f_regression)),
     ('model',xgb.XGBRegressor(random_state=42))])

grid_xgb = GridSearchCV( estimator = tune_xgb, param_grid = {'selector__k':[276] , 
  'model__learning_rate':[0.05,1],'model__n_estimators':[1000,1250,1500,1800],'model__max_depth':[3,4,5],'model__colsample_bytree':[0.3, 0.4,0.5]},
                               n_jobs=-1, scoring="neg_mean_squared_error", cv=5, verbose=3)

grid_xgb.fit(processed_X_train,y_label)
print('the best parameters : ',grid_xgb.best_params_)
print('the best score = ', np.sqrt(-grid_xgb.best_score_))

grid_xgb.best_estimator_.score(processed_X_train,y_label)

tune_gbr = Pipeline([
     ('selector',SelectKBest(f_regression)),
     ('model',GradientBoostingRegressor(random_state=42))])

grid_gbr = GridSearchCV( estimator = tune_gbr, param_grid = {'selector__k':[276] , 
  'model__loss':['huber'],'model__max_depth':[3,5],'model__learning_rate':[0.05,0.07],'model__n_estimators':[500, 1000]}, n_jobs=-1, 
                               scoring=["neg_mean_squared_error",'neg_mean_absolute_error'],refit = 'neg_mean_squared_error', cv=5, verbose=3)

grid_gbr.fit(processed_X_train,y_label)
print('the best parameters : ',grid_gbr.best_params_)
print('the best score = ', np.sqrt(-grid_gbr.best_score_))

grid_gbr.best_estimator_.score(processed_X_train,y_label)

tune_svr = Pipeline([
     ('selector',SelectKBest(f_regression)),
     ('model',SVR())])

grid_svr = GridSearchCV( estimator = tune_svr, param_grid = {'selector__k':[276],
                                                             'model__C': [0.1, 1, 100], 'model__epsilon': [0.005, 0.05, 1], 'model__gamma': [0.01,0,1,1]}, n_jobs=-1, 
                               scoring=["neg_mean_squared_error",'neg_mean_absolute_error'],refit = 'neg_mean_squared_error', cv=5, verbose=3)

grid_svr.fit(processed_X_train,y_label)
print('the best parameters : ',grid_svr.best_params_)
print('the best score = ', np.sqrt(-grid_svr.best_score_))

X_test = test.copy()

features = ['GarageYrBlt','TotRmsAbvGrd','1stFlrSF','GarageArea']
X_test.drop(features,axis=1,inplace=True)

X_feat_eng = X_train.copy()
X_test['lastupdate'] = X_test['YearRemodAdd'] - X_test['YearBuilt']
X_test['area'] = X_test['LotArea'] / X_test['LotFrontage']
X_test['value'] = X_test['YearBuilt'] * X_test['OverallQual']
X_test['basement_finished'] = X_test['BsmtFinSF1'] > 0
X_test['garage_value'] = X_test['YearBuilt'] * X_test['GarageCars']
X_test['extra_features'] = X_test['Fireplaces'] + X_test['OverallQual']

X_test = X_test.drop(columns=['GarageCars'])

X_test['GrLivArea'] = np.log(X_test['GrLivArea'].replace(0,1))

processed_X_test = column_processing.transform(X_test)

best_gbr_model = grid_gbr.best_estimator_
best_xgb_model = grid_xgb.best_estimator_
best_lgb_model = grid_lgb.best_estimator_
best_svr_model = grid_svr.best_estimator_

gbr_pred = np.exp(best_gbr_model.predict(processed_X_test))
xgb_pred = np.exp(best_xgb_model.predict(processed_X_test))
lgb_pred = np.exp(best_lgb_model.predict(processed_X_test))
svr_pred = np.exp(best_svr_model.predict(processed_X_test))

prediction = gbr_pred*0.25 + xgb_pred*0.25 + lgb_pred*0.25 + svr_pred*0.25

result = pd.DataFrame()
result['Id'] = test.Id
result['SalePrice'] = prediction
result.to_csv('submission.csv',index=False)

result